// <auto-generated />
using System;
using Account.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Account.Web.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230424112859_AddDbSeeding")]
    partial class AddDbSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Account.Core.Administrator.Administrator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Administrator");

                    b.HasData(
                        new
                        {
                            Id = new Guid("916d53a7-bc64-4a96-b0a1-0ee5eed5d131"),
                            CreatedAt = new DateTime(2023, 4, 24, 13, 28, 58, 914, DateTimeKind.Local).AddTicks(2450),
                            Email = "ecommerce@admin.de",
                            Role = "Admin",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Account.Core.User.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Account.Core.Administrator.Administrator", b =>
                {
                    b.OwnsOne("Account.Core.User.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("AdministratorId")
                                .HasColumnType("uuid");

                            b1.Property<byte[]>("Hash")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.Property<byte[]>("Salt")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.HasKey("AdministratorId");

                            b1.ToTable("Administrator");

                            b1.WithOwner()
                                .HasForeignKey("AdministratorId");

                            b1.HasData(
                                new
                                {
                                    AdministratorId = new Guid("916d53a7-bc64-4a96-b0a1-0ee5eed5d131"),
                                    Hash = new byte[] { 214, 240, 111, 64, 207, 135, 86, 173, 95, 235, 32, 87, 92, 19, 252, 84, 219, 3, 109, 49, 39, 246, 156, 72, 60, 194, 89, 223, 170, 242, 221, 149, 46, 136, 204, 184, 77, 151, 41, 51, 59, 25, 135, 117, 118, 96, 1, 241, 87, 73, 86, 122, 192, 205, 143, 137, 162, 22, 180, 232, 252, 22, 69, 4 },
                                    Salt = new byte[] { 153, 6, 63, 8, 7, 17, 165, 147, 177, 213, 58, 175, 193, 240, 113, 226, 196, 1, 117, 124, 239, 139, 17, 20, 248, 167, 113, 229, 23, 226, 4, 34, 220, 118, 140, 5, 96, 78, 88, 61, 17, 126, 116, 191, 155, 171, 89, 82, 0, 178, 237, 66, 133, 232, 197, 220, 102, 114, 184, 104, 144, 199, 181, 224, 226, 105, 111, 224, 192, 29, 230, 238, 206, 204, 12, 141, 94, 128, 158, 42, 127, 225, 205, 13, 232, 119, 15, 193, 46, 151, 45, 210, 190, 207, 69, 109, 171, 20, 244, 114, 240, 226, 204, 38, 181, 231, 47, 215, 225, 30, 162, 0, 95, 39, 186, 1, 217, 110, 120, 34, 237, 158, 251, 180, 108, 202, 203, 232 }
                                });
                        });

                    b.Navigation("Password")
                        .IsRequired();
                });

            modelBuilder.Entity("Account.Core.User.Customer", b =>
                {
                    b.OwnsOne("Account.Core.User.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .HasColumnType("text");

                            b1.Property<string>("Zip")
                                .HasColumnType("text");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("Account.Core.User.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.Property<byte[]>("Hash")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.Property<byte[]>("Salt")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.OwnsOne("Account.Core.User.PaymentInformation", "PaymentInformation", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");

                            b1.OwnsOne("Account.Core.User.Address", "Address", b2 =>
                                {
                                    b2.Property<Guid>("PaymentInformationCustomerId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("City")
                                        .HasColumnType("text");

                                    b2.Property<string>("Country")
                                        .HasColumnType("text");

                                    b2.Property<string>("Street")
                                        .HasColumnType("text");

                                    b2.Property<string>("Zip")
                                        .HasColumnType("text");

                                    b2.HasKey("PaymentInformationCustomerId");

                                    b2.ToTable("Customers");

                                    b2.WithOwner()
                                        .HasForeignKey("PaymentInformationCustomerId");
                                });

                            b1.Navigation("Address")
                                .IsRequired();
                        });

                    b.OwnsOne("Account.Core.User.PersonalInformation", "PersonalInformation", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid");

                            b1.Property<DateOnly>("DateOfBirth")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("date")
                                .HasDefaultValue(new DateOnly(1900, 1, 1));

                            b1.Property<string>("FirstName")
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .HasColumnType("text");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("PaymentInformation")
                        .IsRequired();

                    b.Navigation("PersonalInformation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
