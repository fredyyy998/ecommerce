// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Offering.Repositories;

#nullable disable

namespace Offering.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Offering.Models.Offer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OfferType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Offers");

                    b.HasDiscriminator<string>("OfferType").HasValue("Offer");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Offering.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PackageOfferProduct", b =>
                {
                    b.Property<Guid>("PackageOfferId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("char(36)");

                    b.HasKey("PackageOfferId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("PackageOfferProducts", (string)null);
                });

            modelBuilder.Entity("Offering.Models.PackageOffer", b =>
                {
                    b.HasBaseType("Offering.Models.Offer");

                    b.HasDiscriminator().HasValue("PackageOffer");
                });

            modelBuilder.Entity("Offering.Models.SingleOffer", b =>
                {
                    b.HasBaseType("Offering.Models.Offer");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("char(36)");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("SingleOffer");
                });

            modelBuilder.Entity("Offering.Models.Offer", b =>
                {
                    b.OwnsOne("Offering.Models.Discount", "Discount", b1 =>
                        {
                            b1.Property<Guid>("OfferId")
                                .HasColumnType("char(36)");

                            b1.Property<decimal>("DiscountRate")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("OfferId");

                            b1.ToTable("Offers");

                            b1.WithOwner()
                                .HasForeignKey("OfferId");
                        });

                    b.OwnsOne("Offering.Models.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("OfferId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("CurrencyCode")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<decimal>("GrossPrice")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("NetPrice")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("TaxRate")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("OfferId");

                            b1.ToTable("Offers");

                            b1.WithOwner()
                                .HasForeignKey("OfferId");
                        });

                    b.Navigation("Discount");

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("PackageOfferProduct", b =>
                {
                    b.HasOne("Offering.Models.PackageOffer", null)
                        .WithMany()
                        .HasForeignKey("PackageOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Offering.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Offering.Models.SingleOffer", b =>
                {
                    b.HasOne("Offering.Models.Product", "Product")
                        .WithOne()
                        .HasForeignKey("Offering.Models.SingleOffer", "ProductId");

                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
